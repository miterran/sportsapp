{"version":3,"sources":["../src/config.js"],"names":["require","config","envVarsSchema","object","NODE_ENV","string","allow","default","PORT","number","MONGOOSE_DEBUG","boolean","when","is","equal","then","otherwise","JWT_SECRET","required","description","MONGO_URL","JSONODD_API_KEY","PICKMON_UID","PICKMON_KEY","HOSTURL","WSURL","GMAIL","GPASSWORD","MK","APPLE_KEY_ID","APPLE_TEAM_ID","APN_TOPIC","UPDATE_ODD_MIN","APPLE_PASSWORD","unknown","validate","process","env","error","envVars","value","Error","message","port","mongooseDebug","jwtSecret","mongoURL","jsonOddApiKey","pickMon_UID","pickMon_Key"],"mappings":"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","file":"config.js","sourcesContent":["import Joi from 'joi';\n\n// require and configure dotenv, will load vars in .env in PROCESS.ENV\nrequire('dotenv').config();\n\n// define validation for all the env vars\nconst envVarsSchema = Joi.object({\n  NODE_ENV: Joi.string().allow(['development', 'production', 'test', 'provision']).default('development'),\n  PORT: Joi.number().default(8080),\n  MONGOOSE_DEBUG: Joi.boolean().when('NODE_ENV', {\n    is: Joi.string().equal('development'),\n    then: Joi.boolean().default(true),\n    otherwise: Joi.boolean().default(false)\n  }),\n  JWT_SECRET: Joi.string().required().description('JWT Secret required to sign'),\n  MONGO_URL: Joi.string().required().description('Mongo DB host url'),\n  JSONODD_API_KEY: Joi.string().required().description('JSON ODD API KEY'),\n  PICKMON_UID: Joi.string().required().description('PICKMON UID'),\n  PICKMON_KEY: Joi.string().required().description('PICKMON KEY'),\n  HOSTURL: Joi.string().required().description('HOSTURL'),\n  WSURL: Joi.string().required().description('WSURL'),\n  GMAIL: Joi.string().required().description('GMAIL'),\n  GPASSWORD: Joi.string().required().description('GPASSWORD'),\n  MK: Joi.string().required().description('MK'),\n  APPLE_KEY_ID: Joi.string().required().description('APPLE_KEY_ID'),\n  APPLE_TEAM_ID: Joi.string().required().description('APPLE_TEAM_ID'),\n  APN_TOPIC: Joi.string().required().description('APN_TOPIC'),\n  UPDATE_ODD_MIN: Joi.string().required().description('update odd every ? min'),\n  APPLE_PASSWORD: Joi.string().required().description('apple store password'),\n}).unknown()\n  .required();\n\nconst { error, value: envVars } = Joi.validate(process.env, envVarsSchema);\nif (error) {\n  throw new Error(`Config validation error: ${error.message}`);\n}\n\nconst config = {\n  env: envVars.NODE_ENV,\n  port: envVars.PORT,\n  mongooseDebug: envVars.MONGOOSE_DEBUG,\n  jwtSecret: envVars.JWT_SECRET,\n  mongoURL: envVars.MONGO_URL,\n  jsonOddApiKey: envVars.JSONODD_API_KEY,\n  pickMon_UID: envVars.PICKMON_UID,\n  pickMon_Key: envVars.PICKMON_KEY,\n  HOSTURL: envVars.HOSTURL,\n  WSURL: envVars.WSURL,\n  GMAIL: envVars.GMAIL,\n  GPASSWORD: envVars.GPASSWORD,\n  MK: envVars.MK,\n  APPLE_KEY_ID: envVars.APPLE_KEY_ID,\n  APPLE_TEAM_ID: envVars.APPLE_TEAM_ID,\n  APN_TOPIC: envVars.APN_TOPIC,\n  UPDATE_ODD_MIN: envVars.UPDATE_ODD_MIN,\n  APPLE_PASSWORD: envVars.APPLE_PASSWORD,\n};\n\nexport default config;\n"]}
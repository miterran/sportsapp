{"version":3,"sources":["../../../../src/graphql/resolvers/Sign/index.js"],"names":["transporter","createTransport","host","port","secure","auth","user","GMAIL","pass","GPASSWORD","forgotPasswordSchema","object","shape","email","string","required","passcode","matches","min","max","agentRegisterSchema","username","password","deviceToken","playerRegisterSchema","playerUsername","playerNickname","playerPassword","playerPasscode","initial","number","integer","minRisk","positive","maxWin","parlay","boolean","basicTeaser","specialTeaser","bigTeaser","superTeaser","winReverse","actionReverse","parlayTeam","basicTeaserTeam","specialTeaserTeam","bigTeaserTeam","winReverseTeam","actionReverseTeam","userRegisterSchema","Query","Mutation","playerAloneRegister","root","req","console","log","isValid","isReqValid","validate","catch","err","message","title","content","status","findOne","$or","RegExp","isUserExisted","newPlayer","portrait","lastOnlineAt","updatedAt","createdAt","notification","afterWager","afterPick","afterBetOrder","weekNum","isoWeek","isActivate","isDeleted","Agent","wagerLimit","initialCredit","straight","straightTeam","superTeaserTeam","save","newPlayerSaved","create","sign","pick","jwtSecret","playerLogin","player","token"],"mappings":"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ErB0E,aAFqB;;AAAA,WAGvBA,MAHuB;AAAA;AAAA;AAAA;;AAAA,yCAGR,EAAEjC,OAAO,cAAT,EAAyBC,SAAS,mCAAlC,EAAuEC,QAAQ,SAA/E,EAHQ;;AAAA;AAIrBgC,YAJqB,GAIb,uBAAIL,IAAJ,CAAS,iBAAEC,IAAF,CAAOG,MAAP,EAAe,CAAC,KAAD,EAAQ,MAAR,EAAgB,UAAhB,EAA4B,cAA5B,CAAf,CAAT,EAAsE,iBAAOF,SAA7E,CAJa;AAAA,yCAKpB,EAAE/B,wBAAF,EAA4BC,SAASiC,KAArC,EAA4ChC,QAAQ,SAApD,EALoB;;AAAA;AAAA;AAAA;AAAA,yCAOpB,EAAEF,OAAO,cAAT,EAAyBC,SAAS,yBAAlC,EAA6DC,QAAQ,QAArE,EAPoB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAS5B;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;;AAtOuB,CAAjB","file":"index.js","sourcesContent":["import jwt from 'jsonwebtoken';\nimport mongoose from 'mongoose';\nimport yup from 'yup';\nimport config from '../../../config';\nimport User from '../../../models/User';\nimport Agent from '../../../models/User.Agent';\nimport Player from '../../../models/User.Player';\nimport moment from 'moment';\nimport _ from 'lodash';\n//import Transaction from '../../../models/Transaction';\nimport SystemLog from '../../../models/SystemLog';\nimport uniqid from 'uniqid';\n//import PriceRate from '../../../models/PriceRate';\nimport nodemailer from 'nodemailer';\n\nconst transporter = nodemailer.createTransport({\n\thost: 'smtp.gmail.com',\n\tport: 465,\n\tsecure: true,\n    auth: {\n        user: config.GMAIL, // generated ethereal user\n        pass: config.GPASSWORD // generated ethereal password\n    }\n});\n\nconst forgotPasswordSchema = yup.object().shape({\n\temail: yup.string().email().required(),\n\tpasscode: yup.string().matches(/^[0-9]+$/, 'Passcode format is invalid.').min(4).max(4).required()\n});\n\nconst agentRegisterSchema = yup.object().shape({\n\tusername: yup.string().matches(/^\\w+$/, 'Username format is invalid.').min(4).max(10).required(),\n\temail: yup.string().email().required(),\n\tpassword: yup.string().min(4).max(12).required(),\n\tpasscode: yup.string().matches(/^[0-9]+$/, 'Passcode format is invalid.').min(4).max(4).required(),\n\tdeviceToken: yup.string()\n});\n\nconst playerRegisterSchema = yup.object().shape({\n\tplayerUsername: yup.string().matches(/^\\w+$/, 'Username format is invalid.').min(4 | null, 'Username at least 4 characters.').max(10).required('Username required'),\n\tplayerNickname: yup.string().matches(/^\\w+$/, 'Nickname format is invalid.').max(10).required('Nickname required'),\n\tplayerPassword: yup.string().min(4 | null, 'Password at least 4 characters.').max(12).required('Password required'),\n\tplayerPasscode: yup.string().matches(/^[0-9]+$/, 'Passcode format is invalid.').min(4 | null, 'Passcode requires 4 digits.').max(4).required('Passcode required'),\n\tinitial: yup.number().integer().min(0).max(999999).required(),\n\tminRisk: yup.number().integer().positive().min(10 | null, 'Minimun Risk must greater then 10.').max(999999).required(),\n\tmaxWin: yup.number().integer().min(0).max(999999).required(),\n\tparlay: yup.boolean(),\n\tbasicTeaser: yup.boolean(),\n\tspecialTeaser: yup.boolean(),\n\tbigTeaser: yup.boolean(),\n\tsuperTeaser: yup.boolean(),\n\twinReverse: yup.boolean(),\n\tactionReverse: yup.boolean(),\n\tparlayTeam: yup.number().integer().positive().min(2).max(8).required(),\n\tbasicTeaserTeam: yup.number().integer().positive().min(2).max(8).required(),\n\tspecialTeaserTeam: yup.number().integer().positive().min(2).max(8).required(),\n\tbigTeaserTeam: yup.number().integer().positive().min(2).max(8).required(),\n\twinReverseTeam: yup.number().integer().positive().min(2).max(4).required(),\n\tactionReverseTeam: yup.number().integer().positive().min(2).max(4).required(),\n\tpasscode: yup.string().matches(/^[0-9]+$/, 'Passcode format is invalid.').min(4).max(4).required()\n});\n\nconst userRegisterSchema = yup.object().shape({\n\tusername: yup.string().matches(/^\\w+$/, 'Username format is invalid.').min(4).max(10).required(),\n\temail: yup.string().email().required(),\n\tpassword: yup.string().min(4).max(12).required(),\n\tpasscode: yup.string().matches(/^[0-9]+$/, 'Passcode format is invalid.').min(4).max(4).required()\n});\n\n\nexport const Query = {\n\n};\n\nexport const Mutation = {\n\n\tasync playerAloneRegister(root, req){\n\t\ttry {\n\t\t\tconsole.log(req.username)\n\t\t\tconst isReqValid = await userRegisterSchema.isValid(req);\n\t\t\tif(!isReqValid) return { title: 'Please try again.', content: await userRegisterSchema.validate(req).catch(err => err.message), status: 'warning' };\n\t\t\tconst isUserExisted = await User.findOne({ $or: [ { username: new RegExp('\\\\b' + req.username + '\\\\b', 'i') }, { email: new RegExp('\\\\b' + req.email + '\\\\b', 'i') } ]});\n\t\t\tif(isUserExisted) return { title: req.username, content: 'Username or Email has already been taken.', status: 'warning' };\n\t\t\tconst newPlayer = new Player({\n\t\t\t\tportrait: '/',\n\t\t\t\tusername: req.username,\n\t\t\t\tpassword: req.password,\n\t\t\t\tpasscode: req.passcode,\n\t\t\t\temail: req.email,\n\t\t\t\tlastOnlineAt: moment(),\n\t\t\t\tupdatedAt: moment(),\n\t\t\t\tcreatedAt: moment(),\n\t\t\t\tnotification:{\n\t\t\t\t\tdeviceToken: '',\n\t\t\t\t\tafterWager: false,\n\t\t\t\t\tafterPick: false,\n\t\t\t\t\tafterBetOrder: false,\n\t\t\t\t},\n\t\t\t\tweekNum: moment().isoWeek(),\n\t\t\t\tisActivate: true,\n\t\t\t\tisDeleted: false,\n\t\t\t\tAgent: null,\n\t\t\t\twagerLimit: {\n\t\t\t\t\tinitialCredit: 10000,\n\t\t\t\t\tstraight: true,\n\t\t\t\t\tparlay: true,\n\t\t\t\t\tbasicTeaser: true,\n\t\t\t\t\tspecialTeaser: true,\n\t\t\t\t\tbigTeaser: true,\n\t\t\t\t\tsuperTeaser: true,\n\t\t\t\t\tactionReverse: true,\n\t\t\t\t\twinReverse: true,\n\t\t\t\t\tmaxWin: 999999,\n\t\t\t\t\tminRisk: 10,\n\t\t\t\t\tstraightTeam: 1,\n\t\t\t\t\tparlayTeam: 8,\n\t\t\t\t\tbasicTeaserTeam: 8,\n\t\t\t\t\tspecialTeaserTeam: 8,\n\t\t\t\t\tbigTeaserTeam: 8,\n\t\t\t\t\tsuperTeaserTeam: 3,\n\t\t\t\t\tactionReverseTeam: 4,\n\t\t\t\t\twinReverseTeam: 4,\n\t\t\t\t\tupdatedAt: moment(),\n\t\t\t\t},\n\t\t\t})\n\t\t\tconst newPlayerSaved = await newPlayer.save()\n\t\t\tawait SystemLog.create({ title: 'New Player Create Success', content: req.username, status: 'success' });\n\t\t\treturn { title: 'New Player Registed', content: jwt.sign(_.pick(newPlayerSaved, ['_id', 'role', 'username', 'isUnderAgent']), config.jwtSecret), status: 'success' };\n\t\t}catch(e){\n\t\t\tawait SystemLog.create({ title: 'New Player Create Failed', content: `${req.username} ${e}`, status: 'danger' });\n\t\t\treturn { title: 'Unknow Error', content: 'Please try again later!', status: 'danger' };\n\t\t}\n\n\t},\n\n\tasync playerLogin(root, req) {\n\t\ttry {\n\t\t\tconst player = await Player.findOne({ username: new RegExp('\\\\b' + req.username + '\\\\b', 'i'), password: req.password });\n\t\t\tif(!player) return { title: 'Login Failed', content: 'Username or Password is incorrect', status: 'warning' };\n\t\t\tconst token = jwt.sign(_.pick(player, ['_id', 'role', 'username', 'isUnderAgent']), config.jwtSecret);\n\t\t\treturn { title: `PlayerNavigator`, content: token, status: 'success' };\n\t\t} catch(e) {\n\t\t\treturn { title: 'Unknow Error', content: 'Please try again later!', status: 'danger' };\n\t\t}\n\t}\n\n\t// async agentRegister(root, req) {\n\t// \ttry {\n\t// \t\tconst isReqValid = await agentRegisterSchema.isValid(req);\n\t// \t\tif(!isReqValid) return { title: 'Please try again.', content: await agentRegisterSchema.validate(req).catch(err => err.message), status: 'warning' };\n\t// \t\tconst isUserExisted = await User.findOne({ username: new RegExp('\\\\b' + req.username + '\\\\b', 'i') });\n\t// \t\tif(isUserExisted) return { title: req.username, content: 'Username has already been taken.', status: 'warning' };\n\t// \t\tconst isEmailExisted = await User.findOne({ email: new RegExp('\\\\b' + req.email + '\\\\b', 'i') });\n\t// \t\tif(isEmailExisted) return { title: req.email, content: 'Email has already been taken.', status: 'warning' };\n\n\t// \t\tconst newAgentBonus = await PriceRate.findOne({ item: 'NewAgentBonus' })\n\n\t// \t\tconst agent = new Agent({\n\t// \t\t\tusername: req.username,\n\t// \t\t\temail: req.email,\n\t// \t\t\tpassword: req.password,\n\t// \t\t\tpasscode: req.passcode,\n\t// \t\t\tweekNum: moment().isoWeek(),\n\t// \t\t\tcredit: { \n\t// \t\t\t\tbalance: newAgentBonus.credit\n\t// \t\t\t},\n\t// \t\t\tnotification: {\n\t// \t\t\t\tdeviceToken: req.deviceToken\n\t// \t\t\t},\n\t// \t\t\tPlayers: [],\n\t// \t\t\tdeletedPlayers: [],\n\t// \t\t});\n\t// \t\tconst newAgent = await agent.save();\n\t// \t\tconsole.log(newAgent.notification)\n\t// \t\tawait Transaction.create({ \n\t// \t\t\tAgent: newAgent._id,\n\t// \t\t\tID: uniqid.process(),\n\t// \t\t\ttype: 'Bonus',\n\t// \t\t\tdescription: 'New Agent Bonus',\n\t// \t\t\tamount: newAgentBonus.credit,\n\t// \t\t\tbalance: newAgent.credit.balance\n\t// \t\t});\n\t// \t\tawait SystemLog.create({ title: 'New Agent Created', content: req.username, status: 'success' });\n\t// \t\tawait SystemLog.create({ title: 'New Agent Bonus ' + newAgentBonus.credit, content: req.username, status: 'success' });\n\t// \t\treturn { title: 'Created New Agent', content: jwt.sign(_.pick(newAgent, ['_id', 'role', 'username']), config.jwtSecret), status: 'success' };\n\t// \t} catch(e) {\n\t// \t\tawait SystemLog.create({ title: 'New Agent Failed', content: `${req.username} ${e}`, status: 'danger' });\n\t// \t\treturn { title: 'Unknow Error', content: 'Please try again later!', status: 'danger' };\n\t// \t}\n\t// },\n\n\t// async login(root, req) {\n\t// \ttry {\n\n\t// \t\tconst deviceToken = req.deviceToken ? { $set: { 'notification.deviceToken': req.deviceToken } } : null\n\n\t// \t\tconst user = await User.findOneAndUpdate({ username: new RegExp('\\\\b' + req.username + '\\\\b', 'i'), password: req.password }, deviceToken);\n\n\t// \t\tif(!user) return { title: 'Login Failed', content: 'Username or Password is incorrect', status: 'warning' };\n\n\t// \t\tconst token = jwt.sign(_.pick(user, ['_id', 'role', 'username']), config.jwtSecret);\n\t// \t\treturn { title: `${user.role}Navigator`, content: token, status: 'success' };\n\t// \t} catch(e) {\n\t// \t\treturn { title: 'Unknow Error', content: 'Please try again later!', status: 'danger' };\n\t// \t}\n\t// },\n\n\t// async playerRegister(root, req, ctx) {\n\t// \ttry {\n\t// \t\tif(ctx.user.role !== 'Agent') return { title: 'Not Authenticated', content: 'Please try again.', status: 'danger' };\n\t// \t\tconst agent = await Agent.findOne({ _id: mongoose.Types.ObjectId(ctx.user._id), passcode: req.passcode });\n\t// \t\tif(!agent) return { title: 'Passcode Not Match', content: 'Please try again.', status: 'warning' };\n\t// \t\tconst isReqValid = await playerRegisterSchema.isValid(req);\n\t// \t\tif(!isReqValid) return { title: 'Please try again.', content: await playerRegisterSchema.validate(req).catch(err => err.message), status: 'warning' };\n\t// \t\tconst isUserExisted = await User.findOne({ username: new RegExp('\\\\b' + req.playerUsername + '\\\\b', 'i') }, '_id');\n\n\t// \t\tif(isUserExisted) return { title: req.playerUsername, content: 'Username has already been taken.', status: 'warning' };\n\n\t// \t\tconst player = new Player({\n\t// \t\t\tportrait: '/',\n\t// \t\t\tusername: req.playerUsername,\n\t// \t\t\tnickname: req.playerNickname,\n\t// \t\t\tpassword: req.playerPassword,\n\t// \t\t\tpasscode: req.playerPasscode,\n\t// \t\t\tAgent: ctx.user._id,\n\t// \t\t\tweekNum: moment().isoWeek(),\n\t// \t\t\tisActivate: true,\n\t// \t\t\tisDeleted: false,\n\t// \t\t\tcredit: {\n\t// \t\t\t\tinitial: Number(req.initial),\n\t// \t\t\t},\n\t// \t\t\tnotification: {},\n\t// \t\t\twagerLimit: {\n\t// \t\t\t\tparlay: req.parlay,\n\t// \t\t\t\tbasicTeaser: req.basicTeaser,\n\t// \t\t\t\tspecialTeaser: req.specialTeaser,\n\t// \t\t\t\tbigTeaser: req.bigTeaser,\n\t// \t\t\t\tsuperTeaser: req.superTeaser,\n\t// \t\t\t\tactionReverse: req.actionReverse,\n\t// \t\t\t\twinReverse: req.winReverse,\n\t// \t\t\t\tmaxWin: Number(req.maxWin),\n\t// \t\t\t\tminRisk: Number(req.minRisk),\n\t// \t\t\t\tparlayTeam: req.parlayTeam,\n\t// \t\t\t\tbasicTeaserTeam: req.basicTeaserTeam,\n\t// \t\t\t\tspecialTeaserTeam: req.specialTeaserTeam,\n\t// \t\t\t\tbigTeaserTeam: req.bigTeaserTeam,\n\t// \t\t\t\tactionReverseTeam: req.actionReverseTeam,\n\t// \t\t\t\twinReverseTeam: req.winReverseTeam,\n\t// \t\t\t}\n\t// \t\t});\n\n\t// \t\tconst newPlayer = await player.save();\n\n\t// \t\tconst newPriceCost = await PriceRate.findOne({ item: 'NewPlayerCost' })\n\n\t// \t\tconst agentUpdated = await Agent.findOneAndUpdate({ \n\t// \t\t\t_id: mongoose.Types.ObjectId(ctx.user._id) \n\t// \t\t}, { \n\t// \t\t\t$push: { Players: newPlayer._id }, \n\t// \t\t\t$inc: { 'credit.balance': newPriceCost.credit }, \n\t// \t\t\t$set: { 'credit.updatedAt': moment() } \n\t// \t\t}, { new: true });\n\n\t// \t\tawait Transaction.create({\n\t// \t\t\tAgent: ctx.user._id,\n\t// \t\t\tID: uniqid.process(),\n\t// \t\t\ttype: 'CreatePlayer',\n\t// \t\t\tdescription: `New Player ${newPlayer.username} (${newPlayer.nickname})`,\n\t// \t\t\tamount: newPriceCost.credit,\n\t// \t\t\tbalance: agentUpdated.credit.balance\n\t// \t\t});\n\n\t// \t\tawait SystemLog.create({ title: 'New Player Created', content: `${agentUpdated.username} created a new player ${newPlayer.username} (${newPlayer.nickname})`, status: 'success'});\n\t// \t\treturn { title: 'New Player', content: newPlayer.username, status: 'success' };\n\t// \t} catch(e) {\n\t// \t\tawait SystemLog.create({ title: 'New Player Create Failed', content: `${ctx.user.username} create player ${req.playerUsername} failed ${e}`, status: 'danger'});\n\t// \t\treturn { title: 'Unknow Error', content: 'Please try again later!', status: 'danger' };\n\t// \t}\n\n\t// },\n\t// async forgotPassword(root, req){\n\t// \ttry {\n\t// \t\tconst isReqValid = await forgotPasswordSchema.isValid(req);\n\t// \t\tif(!isReqValid) return { title: 'Please try again.', content: await forgotPasswordSchema.validate(req).catch(err => err.message), status: 'warning' };\n\t// \t\tconst tempPassword = uniqid.process().substring(0, 6);\n\t// \t\tconst agent = await Agent.findOneAndUpdate({ email: req.email, passcode: req.passcode }, { $set: { password: tempPassword }});\n\t// \t\tif(!agent) return { title: 'ERROR.', content: 'Email or Passcode incorrect', status: 'danger' };\n\n\t// \t\tconst mailOptions = {\n\t// \t\t    from: config.GMAIL, // sender address\n\t// \t\t    to: agent.email, // list of receivers\n\t// \t\t    subject: 'SPORTS AGENT APP PASSWORD RESET', // Subject line\n\t// \t\t    text: `Sports Agent App \\n username: ${agent.username} \\n temporary password: ${tempPassword} \\n Please set up a new password after login.`, // plain text body\n\t// \t\t};\n\n\t// \t\tawait transporter.sendMail(mailOptions);\n\t// \t\treturn { title: 'SUCCESS', content: agent.email, status: 'success' };\n\n\n\t// \t} catch(e) {\n\t// \t\tawait SystemLog.create({ title: 'Agent Reset Password Error', content: `${req.email} ${req.passcode} failed ${e}`, status: 'danger'});\n\t// \t\treturn { title: 'Unknow Error', content: 'Please try again later!', status: 'danger' };\n\t// \t}\n\n\t// }\n};"]}
{"version":3,"sources":["../../../../src/graphql/resolvers/Action/index.js"],"names":["Query","table","root","req","findOne","name","action","sports","sort","a","b","indexOf","map","sport","leagues","league","periods","actionEvents","tablePicks","isEmpty","find","$or","cutOffAt","$gte","status","isFinished","then","compact","events","event","isActionOddActivate","wagerPicks","eventOddPicks","eventIDs","uniqBy","_id","Types","ObjectId","pick","Event","toString","ID","marked","oddLine","actionOdd","oddLineTarget","oddPoint","oddPointTarget","oddTarget","oddType","Mutation","createBetOrder","ctx","passcode","betType","betAmount","atRisk","toWin","picks","user","player","title","content","isUnderAgent","isActivate","recalAtRisk","recalToWin","Number","available","length","wagerLimit","maxWin","minRisk","pickIDs","Player","isClosed","populate","path","select","betOrders","betOrder","createdAt","Picks","Pick","existedOpenBets","existedOpenBet","isEqual","toUpperCase","format","uniqEventIDs","mongooseEventIDs","eventID","latestEvents","latestEvent","period","team","away","home","eventDetail","isOddExpired","latestOddPoint","latestOddLine","pickOddPoint","pickOddLine","oddUpdatedDetail","update","$set","isPicked","multi","newBetOrder","process","Agent","bet","type","amount","resultAmount","note","updatedAt","save","savedBetOrder","newPicks","BetOrder","created","insertMany","savedPickIDs","findOneAndUpdate","new","theBetOrder","console","log","create","username"],"mappings":"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","file":"index.js","sourcesContent":["import config from '../../../config'\nimport Table from '../../../models/Table';\nimport Event from '../../../models/Event';\nimport Agent from '../../../models/User.Agent';\nimport Player from '../../../models/User.Player';\nimport Pick from '../../../models/Pick';\nimport BetOrder from '../../../models/BetOrder';\nimport moment from 'moment';\nimport mongoose from 'mongoose';\nimport _ from 'lodash';\nimport uniqid from 'uniqid';\n\nimport generateAtRiskToWin from '../../../utils/functions/generateAtRiskToWin';\nimport renameActionToTable from '../../../utils/functions/renameActionToTable';\nimport renameActionFullName from '../../../utils/functions/renameActionFullName';\nimport sportTypes from '../../../utils/lists/sportTypes';\nimport periodTypes from '../../../utils/lists/periodTypes';\n\nimport minActionTeams from '../../../utils/objects/minActionTeams';\n\nimport updateEvents from '../../../queues/updateEvents';\nimport updateTables from '../../../queues/updateTables';\nimport SystemLog from '../../../models/SystemLog';\n\nimport getPlayerCurrentCredit from '../../../services/getUserCredit/player'\n// import Transaction from '../../../models/Transaction';\n// import PriceRate from '../../../models/PriceRate';\n\n// import apnProvider from '../../../apn'\n// import apn from 'apn'\n\nexport const Query = {\n\tasync table(root, req) {\n\t\t// await updateEvents()\n\t\tawait updateTables();\n\t\tlet table = await Table.findOne({ name: renameActionToTable(req.action) });\n\t\ttable.sports.sort((a, b) => sportTypes.indexOf(a.name) - sportTypes.indexOf(b.name));\n\t\ttable.sports.map(sport => sport.leagues.map(league => league.periods.sort((a, b) => periodTypes.indexOf(a.name) - periodTypes.indexOf(b.name))));\n\t\treturn table;\n\t},\n\tasync actionEvents(root, { action, tablePicks }) {\n\t\tif(_.isEmpty(tablePicks)) return [];\n\t\t//\t\tawait updateEvents()\n\t\treturn Event.find({ $or: tablePicks, cutOffAt: { $gte: moment() }, status: 'Pending', isFinished: false }).sort({ cutOffAt: 1 })\n\t\t\t.then(events => _.compact(events.map(event => { event.action = action; if(event.isActionOddActivate) { return event; } else { return null; } })));\n\t},\n\tasync wagerPicks(root, { action, eventOddPicks }) {\n\t\tif(_.isEmpty(eventOddPicks)) return [];\n\t\t//\t\tawait updateEvents()\n\t\tconst eventIDs = _.uniqBy(eventOddPicks.map(pick => ({ _id: mongoose.Types.ObjectId(pick.Event) })), '_id');\n\t\tconst events = await Event.find({ $or: eventIDs }).then(events => events.map(event => { event.action = action; return event; } ));\n\t\treturn eventOddPicks.map(pick => {\n\t\t\tlet event = _.find(events, event => event._id.toString() === pick.Event );\n\t\t\treturn {\n\t\t\t\tID: pick.ID,\n\t\t\t\tEvent: event,\n\t\t\t\tmarked: {\n\t\t\t\t\toddLine: event.actionOdd[pick.marked.oddLineTarget] || null,\n\t\t\t\t\toddPoint: event.actionOdd[pick.marked.oddPointTarget] || null,\n\t\t\t\t\toddTarget: pick.marked.oddTarget,\n\t\t\t\t\toddType: pick.marked.oddType,\n\t\t\t\t\toddLineTarget: pick.marked.oddLineTarget,\n\t\t\t\t\toddPointTarget: pick.marked.oddPointTarget,\n\t\t\t\t}\n\t\t\t};\n\t\t});\n\t}\n};\n\nexport const Mutation = {\n\tasync createBetOrder(root, { action, passcode, betType, betAmount, atRisk, toWin, picks }, ctx) {\n\t\ttry {\n\t\t//validation\n\t\t\tconst player = await Player.findOne({ _id: mongoose.Types.ObjectId(ctx.user._id), passcode: passcode });\n\t\t\tif(!player) return { title: 'Passcode Not Match', content: 'Please try again.', status: 'warning' };\n\n\t\t\tif(player.isUnderAgent && !player.isActivate) return { title: 'Account Has Deactivated', content: 'Please contact Agent.', status: 'warning' };\n\n\n\t\t\tconst { atRisk: recalAtRisk, toWin: recalToWin } = generateAtRiskToWin( action, betType, betAmount, picks );\n\n\t\t\tif( atRisk !== Number(recalAtRisk) || toWin !== Number(recalToWin) ) return { title: 'Bet Amount Error', content: 'Please try again.', status: 'warning' };\n\n\t\t\tconst { available } = await getPlayerCurrentCredit(ctx.user._id)\n\n\t\t\tif( atRisk > available ) return { title: 'You Have Not Enough Credit', content: available, status: 'warning' };\n\n\t\t\tif( picks.length > player.wagerLimit[action+'Team'] ) return { title: renameActionFullName(action) + ' Teams Over Wager Limit', content: 'Please try again.', status: 'warning' };\n\t\t\tif( picks.length < minActionTeams[action] ) return { title: renameActionFullName(action) + ' Teams Under ' + minActionTeams[action], content: 'Please try again.', status: 'warning' };\n\t\t\tif( toWin > player.wagerLimit.maxWin ) return { title: 'Win Amount Over Wager Limit ' + player.wagerLimit.maxWin, content: 'Please try again or contact Agent.', status: 'warning' };\n\t\t\tif( atRisk < player.wagerLimit.minRisk ) return { title: 'Risk Amount Under ' + player.wagerLimit.minRisk, content: 'Please try again or contact Agent.', status: 'warning' };\n\t\t\t//\n\n\t\t\t//check duplicate order\n\t\t\tconst pickIDs = picks.map(pick => pick.ID);\n\t\t\tconst existedOpenBets = await BetOrder.find({ Player: mongoose.Types.ObjectId(ctx.user._id), 'bet.action': action, isClosed: false }, 'ID Picks createdAt').populate({ path: 'Picks', select: 'ID' }).then(betOrders => betOrders.map(betOrder => ({ ID: betOrder.ID, createdAt: betOrder.createdAt, Picks: betOrder.Picks.map(Pick => Pick.ID)}) ));\n\t\t\tfor(let existedOpenBet of existedOpenBets){\n\t\t\t\tif(_.isEqual(pickIDs, existedOpenBet.Picks)) {\n\t\t\t\t\treturn { \n\t\t\t\t\t\ttitle: 'Order Duplicated', \n\t\t\t\t\t\tcontent: `#${existedOpenBet.ID.toUpperCase()} Submitted On:, ${moment(existedOpenBet.createdAt).format('ddd MMM DD - hh:mm A')}`, \n\t\t\t\t\t\tstatus: 'warning' \n\t\t\t\t\t}; \n\t\t\t\t}\n\t\t\t}\n\t\t\t//\n\n\t\t\t// check latest odd\n//\t\t\tawait updateEvents();\n\n\t\t\tconst uniqEventIDs = _.uniqBy(picks.map(pick => pick.Event));\n\t\t\tconst mongooseEventIDs =  uniqEventIDs.map(eventID => ({ _id: mongoose.Types.ObjectId(eventID) }));\n\t\t\tconst latestEvents = await Event.find( { $or: mongooseEventIDs }).then(events => events.map(event => { event.action = action; return event; }));\n\t\t\tfor( let pick of picks){\n\t\t\t\tlet latestEvent = _.find(latestEvents, { _id: mongoose.Types.ObjectId(pick.Event) });\n\t\t\t\tif(!latestEvent) return { title: 'Event Error', content: 'Please pick other event.', status: 'warning' };\n\t\t\t\tlet { sport, league, period, cutOffAt,team: { away, home } } =  latestEvent;\n\t\t\t\tlet eventDetail = `${sport} ${league} ${period},${away} vs ${home}`;\n\t\t\t\tif(latestEvent.isOddExpired) return { title: `Odd Expired ${moment(cutOffAt).format('hh:mm A')}`, content: eventDetail, status: 'warning' };\n\t\t\t\tif(!latestEvent.isActionOddActivate) return { title: 'Event Not Available', content: eventDetail, status: 'warning' };\n\t\t\t\tlet latestOddPoint = latestEvent.actionOdd[pick.marked.oddPointTarget] || null;\n\t\t\t\tlet latestOddLine = latestEvent.actionOdd[pick.marked.oddLineTarget] || null;\n\t\t\t\tlet pickOddPoint = pick.marked.oddPoint || null;\n\t\t\t\tlet pickOddLine = pick.marked.oddLine || null;\n\t\t\t\tlet oddUpdatedDetail = `${pick.marked.oddType} ${pick.marked.oddTarget} ${ pickOddPoint ? `( ${pickOddPoint} ) ` : '' }${pickOddLine} to ${ latestOddPoint ? `( ${latestOddPoint} ) ` : '' }${latestOddLine}`;\n\t\t\t\tif(latestOddPoint !== pickOddPoint || latestOddLine !== pickOddLine) return { title: 'Odd Has Update', content: `${eventDetail}, ${oddUpdatedDetail}`, status: 'warning' };\n\t\t\t}\n\t\t\t//\n\t\t\n\t\t\tawait Event.update({ $or: mongooseEventIDs }, { $set: { isPicked: true } }, { multi: true });\n\n\t\t\tconst newBetOrder = new BetOrder({\n\t\t\t\tID: uniqid.process(),\n\t\t\t\tPlayer: ctx.user._id,\n\t\t\t\tAgent: player.Agent || null,\n\t\t\t\tbet: {\n\t\t\t\t\taction: action,\n\t\t\t\t\ttype: betType,\n\t\t\t\t\tamount: betAmount,\n\t\t\t\t\ttoWin: toWin,\n\t\t\t\t\tatRisk: atRisk,\n\t\t\t\t},\n\t\t\t\tresultAmount: null,\n\t\t\t\tisClosed: false,\n\t\t\t\tstatus: 'Pending',\n\t\t\t\tnote: {},\n\t\t\t\tupdatedAt: moment(),\n\t\t\t\tcreatedAt: moment()\n\t\t\t});\n\t\t\tconst savedBetOrder = await newBetOrder.save();\n\t\t\tconst newPicks = picks.map(pick => {\n\t\t\t\treturn new Pick({\n\t\t\t\t\tID: pick.ID,\n\t\t\t\t\tPlayer: ctx.user._id,\n\t\t\t\t\tAgent: player.Agent || null,\n\t\t\t\t\tBetOrder: savedBetOrder._id,\n\t\t\t\t\tEvent: pick.Event,\n\t\t\t\t\tmarked: pick.marked,\n\t\t\t\t\tisClosed: false,\n\t\t\t\t\tstatus: 'Pending',\n\t\t\t\t\tnote: {},\n\t\t\t\t\tupdatedAt: moment(),\n\t\t\t\t\tcreated: moment(),\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tconst savedPickIDs = await Pick.insertMany(newPicks).then(picks => picks.map(pick => pick._id));\n\t\t\tconst theBetOrder = await BetOrder.findOneAndUpdate({ _id: mongoose.Types.ObjectId(savedBetOrder._id) }, { $set: { Picks: savedPickIDs } }, { new: true });\n\n\t\t\t// const actionFee = await PriceRate.findOne({ item: 'PlayerActionFee' })\n\n\t\t\t// await Player.findOneAndUpdate({ _id: mongoose.Types.ObjectId(ctx.user._id) }, { $inc: { 'credit.pending': atRisk }, $set: { 'credit.updatedAt': moment() } });\n\t\t\t// const agent = await Agent.findOneAndUpdate({_id: mongoose.Types.ObjectId(player.Agent) }, { $inc: { 'credit.pending': atRisk, 'credit.balance': actionFee.credit }, $set: { 'credit.updatedAt': moment() } }, { new: true });\n\n\t\t\t\n\n\t\t\t// await Transaction.create({ \n\t\t\t// \tAgent: agent._id,\n\t\t\t// \tID: savedBetOrder.ID,\n\t\t\t// \ttype: 'ActionFee',\n\t\t\t// \tdescription: `(${ctx.user.username}) Transaction (Bet) Fee`,\n\t\t\t// \tamount: actionFee.credit,\n\t\t\t// \tbalance: agent.credit.balance\n\t\t\t// });\n\n\t\t\t// await SystemLog.create({ title: 'New Open Bet Order', content: `${ctx.user.username} created a open bet ${theBetOrder.title}`, status: 'success' });\n\n\t\t\t// if(agent.notification.afterWager){\n\t\t\t// \tconst agentNotify = new apn.Notification({\n\t\t\t// \t\tsound: 'ping.aiff',\n\t\t\t// \t\talert: `${player.username} had submitted a ${theBetOrder.title}, At Risk: ${theBetOrder.bet.atRisk}, To Win: ${theBetOrder.bet.toWin}`,\n\t\t\t// \t\ttopic: config.APN_TOPIC,\n\t\t\t// \t\tpayload: { BetOrder: theBetOrder._id }\n\t\t\t// \t})\n\n\t\t\t// \tawait apnProvider.send(agentNotify, agent.notification.deviceToken)\n\t\t\t// \tapnProvider.shutdown();\n\t\t\t// }\n\n\t\t\treturn { title: 'SUCCESS', content: `#${savedBetOrder.ID.toUpperCase()} CREATED`, status: 'success' };\n\t\t} catch (e) {\n\t\t\tconsole.log(e)\n\t\t\tawait SystemLog.create({ title: 'New Open Bet Order Failed', content: `${ctx.user.username} created a open bet Failed ${e}`, status: 'danger'});\n\t\t\treturn { title: 'Unknow Error', content: 'Please try again later!', status: 'danger' };\n\t\t}\n\t}\n};\n"]}
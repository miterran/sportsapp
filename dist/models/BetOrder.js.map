{"version":3,"sources":["../../src/models/BetOrder.js"],"names":["Schema","BetOrderSchema","ID","type","String","required","unique","Player","Types","ObjectId","ref","Agent","Picks","bet","action","enum","amount","Number","toWin","atRisk","resultAmount","isClosed","Boolean","status","default","note","updatedAt","Date","now","createdAt","BetOrderClass","length","loadClass","BetOrder","model"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;;;AAEA,IAAMA,SAAS,mBAASA,MAAxB;;AAEA,IAAMC,iBAAiB,IAAID,MAAJ,CAAW;AACjCE,KAAI,EAAEC,MAAMC,MAAR,EAAgBC,UAAU,IAA1B,EAAgCC,QAAQ,IAAxC,EAD6B,EACmB;AACpDC,SAAQ,EAAEJ,MAAMH,OAAOQ,KAAP,CAAaC,QAArB,EAA+BC,KAAK,MAApC,EAA4CL,UAAU,IAAtD,EAFyB;AAGjCM,QAAO,EAAER,MAAMH,OAAOQ,KAAP,CAAaC,QAArB,EAA+BC,KAAK,MAApC,EAH0B;AAIjCE,QAAO,CAAC,EAAET,MAAMH,OAAOQ,KAAP,CAAaC,QAArB,EAA+BC,KAAK,MAApC,EAA4CL,UAAU,IAAtD,EAAD,CAJ0B;AAKjCQ,MAAK;AACJC,UAAQ,EAAEX,MAAMC,MAAR,EAAgBW,MAAM,CAAC,UAAD,EAAa,QAAb,EAAuB,aAAvB,EAAsC,eAAtC,EAAuD,WAAvD,EAAoE,aAApE,EAAmF,YAAnF,EAAiG,eAAjG,CAAtB,EAAyIV,UAAU,IAAnJ,EADJ;AAEJF,QAAM,EAAEA,MAAMC,MAAR,EAAgBW,MAAK,CAAE,OAAF,EAAW,MAAX,CAArB,EAA0CV,UAAU,IAApD,EAFF;AAGJW,UAAQ,EAAEb,MAAMc,MAAR,EAAgBZ,UAAU,IAA1B,EAHJ;AAIJa,SAAO,EAAEf,MAAMc,MAAR,EAAgBZ,UAAU,IAA1B,EAJH;AAKJc,UAAQ,EAAEhB,MAAMc,MAAR,EAAgBZ,UAAU,IAA1B;AALJ,EAL4B;AAYjCe,eAAc,EAAEjB,MAAMc,MAAR,EAZmB;AAajCI,WAAU,EAAElB,MAAMmB,OAAR,EAAiBjB,UAAU,IAA3B,EAbuB;AAcjCkB,SAAQ,EAAEpB,MAAMC,MAAR,EAAgBW,MAAM,CAAE,KAAF,EAAS,MAAT,EAAiB,MAAjB,EAAyB,SAAzB,EAAoC,WAApC,EAAiD,QAAjD,CAAtB,EAAmFS,SAAS,SAA5F,EAAuGnB,UAAU,IAAjH,EAdyB;AAejCoB,qBAfiC;AAgBjCC,YAAW,EAAEvB,MAAMwB,IAAR,EAAcH,SAASG,KAAKC,GAA5B,EAhBsB;AAiBjCC,YAAW,EAAE1B,MAAMwB,IAAR,EAAcH,SAASG,KAAKC,GAA5B;AAjBsB,CAAX,CAAvB;;IAoBME,a;;;;;;;sBACW;AAAE,OAAG,KAAKT,QAAR,EAAkB,OAAO,KAAKK,SAAZ,CAAuB,OAAO,IAAP;AAAc;;;sBAC5D;AACZ,UAAU,KAAKd,KAAL,CAAWmB,MAArB,cAAmC,KAAKnB,KAAL,CAAWmB,MAAX,GAAoB,CAApB,GAAwB,GAAxB,GAA8B,EAAjE,UAAuE,oCAAqB,KAAKlB,GAAL,CAASC,MAA9B,CAAvE;AACA;;;;;;AAGFb,eAAe+B,SAAf,CAAyBF,aAAzB;;AAGA,IAAMG,WAAY,mBAASC,KAAT,CAAe,UAAf,EAA2BjC,cAA3B,CAAlB;;kBAEegC,Q","file":"BetOrder.js","sourcesContent":["import mongoose from 'mongoose';\nimport Note from './Note';\nimport renameActionFullName from '../utils/functions/renameActionFullName';\n\nconst Schema = mongoose.Schema;\n\nconst BetOrderSchema = new Schema({\n\tID: { type: String, required: true, unique: true }, // generate by unique time\n\tPlayer: { type: Schema.Types.ObjectId, ref: 'User', required: true },\n\tAgent: { type: Schema.Types.ObjectId, ref: 'User' },\n\tPicks: [{ type: Schema.Types.ObjectId, ref: 'Pick', required: true }],\n\tbet: {\n\t\taction: { type: String, enum: ['straight', 'parlay', 'basicTeaser', 'specialTeaser', 'bigTeaser', 'superTeaser', 'winReverse', 'actionReverse'], required: true },\n\t\ttype: { type: String, enum:[ 'wager', 'risk' ], required: true },\n\t\tamount: { type: Number, required: true },\n\t\ttoWin: { type: Number, required: true },\n\t\tatRisk: { type: Number, required: true },\n\t},\n\tresultAmount: { type: Number },\n\tisClosed: { type: Boolean, required: true },\n\tstatus: { type: String, enum: [ 'Won', 'Lost', 'Push', 'Pending', 'Cancelled', 'Review' ], default: 'Pending', required: true },\n\tnote: Note,\n\tupdatedAt: { type: Date, default: Date.now },\n\tcreatedAt: { type: Date, default: Date.now }\n});\n\nclass BetOrderClass {\n\tget closedAt () { if(this.isClosed) return this.updatedAt; return null; }\n\tget title () {\n\t\treturn `${this.Picks.length} Team${this.Picks.length > 1 ? 's' : ''} ${renameActionFullName(this.bet.action)}`;\n\t}\n}\n\nBetOrderSchema.loadClass(BetOrderClass);\n\n\nconst BetOrder  = mongoose.model('BetOrder', BetOrderSchema);\n\nexport default BetOrder;"]}
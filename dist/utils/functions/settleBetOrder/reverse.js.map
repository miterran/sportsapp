{"version":3,"sources":["../../../../src/utils/functions/settleBetOrder/reverse.js"],"names":["permutation","arr","permutations","swap","a","b","tmp","generate","n","newArr","slice","push","i","length","multiDimensionalUnique","uniques","itemsFound","l","stringified","JSON","stringify","reverse","Picks","action","atRisk","betType","type","betAmount","amount","picksHaveReview","some","status","picksHavePending","allPicksLost","every","allPicksCancelled","allPicksPostponed","picksRange","range","inOrders","orders","isClosed","resultAmount","note","Number","title","content","forEach","order","idx","oddLine","marked","pickRiskAmount","Math","abs","isNumber","round"],"mappings":"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","file":"reverse.js","sourcesContent":["import _ from 'lodash';\n\nconst permutation = (arr) => {\n\tlet permutations = [];\n\tconst swap = (a, b) => {\n\t\tlet tmp = arr[a];\n\t\tarr[a] = arr[b];\n\t\tarr[b] = tmp;\n\t};\n\tconst generate = (n) => {\n\t\tif(n === 1){\n\t\t\tlet newArr = arr.slice(0, 2);\n\t\t\tpermutations.push(newArr);\n\t\t}else{\n\t\t\tfor(let i = 0; i !== n; ++i){\n\t\t\t\tgenerate(n - 1);\n\t\t\t\tswap(n % 2 ? 0 : i, n - 1);\n\t\t\t}\n\t\t}\n\t};\n\tgenerate(arr.length);\n\treturn permutations;\n};\n\nconst multiDimensionalUnique = (arr) => {\n\tlet uniques = [];\n\tlet itemsFound = {};\n\tfor(let i = 0, l = arr.length; i < l; i++) {\n\t\tlet stringified = JSON.stringify(arr[i]);\n\t\tif(itemsFound[stringified]) { continue; }\n\t\tuniques.push(arr[i]);\n\t\titemsFound[stringified] = true;\n\t}\n\treturn uniques;\n};\n\nconst reverse = ({ action, atRisk, type: betType, amount: betAmount }, Picks) => {\n\n//\tconst picksHaveWon       = _.some(Picks, { status: 'Won' });\t\t\t\n//\tconst picksHaveLost      = _.some(Picks, { status: 'Lost' });\t\t\n//\tconst picksHavePush      = _.some(Picks, { status: 'Push' });\t\t\n//\tconst picksHavePostponed = _.some(Picks, { status: 'Postponed' });\n//\tconst picksHaveCancelled = _.some(Picks, { status: 'Cancelled' });\n\tconst picksHaveReview    = _.some(Picks, { status: 'Review' });\n\tconst picksHavePending   = _.some(Picks, { status: 'Pending' });\n\t\n\t//\tconst allPicksWon        = _.every(Picks, { status: 'Won' });\n\tconst allPicksLost       = _.every(Picks, { status: 'Lost' });\n\t//\tconst allPicksPush       = _.every(Picks, { status: 'Push' });\n\tconst allPicksCancelled  = _.every(Picks, { status: 'Postponed' });\n\tconst allPicksPostponed  = _.every(Picks, { status: 'Cancelled' });\n\t//\tconst allPicksReview     = _.every(Picks, { status: 'Review' });\n\t//\tconst allPicksPending    = _.every(Picks, { status: 'Pending' });\n\n\tconst picksRange = _.range(Picks.length);\n\tconst inOrders = permutation(picksRange);\n\tconst orders = multiDimensionalUnique(inOrders);\n\n\tlet isClosed = false;\n\tlet status = 'Pending';\n\tlet resultAmount = null;\n\tlet note = {};\n\n\tswitch(true){\n\n\tcase allPicksLost:\n\t\tisClosed = true;\n\t\tstatus = 'Lost';\n\t\tresultAmount = -Number(atRisk);\n\t\tbreak;\n\n\tcase picksHaveReview:\n\t\tstatus = 'Review';\n\t\tnote = { title: 'Review', content: 'To be determine!', status: 'warning' };\n\t\tbreak;\n\n\tcase picksHavePending:\n\t\tbreak;\n\n\tcase allPicksCancelled:\n\tcase allPicksPostponed:\n\t\tisClosed = true;\n\t\tstatus = 'Cancelled';\n\t\tresultAmount = 0;\n\t\tbreak;\n\n\tdefault:\n\n\t\torders.forEach(order => {\n\t\t\tfor(let idx of order){\n\t\t\t\tlet { status, marked: { oddLine } } = Picks[idx];\n\t\t\t\tlet pickRiskAmount = atRisk / (( Picks.length - 1 ) * Picks.length);\n\t\t\t\tswitch(status){\n\t\t\t\tcase 'Won':\n\t\t\t\t\tresultAmount += oddLine > 0 ? pickRiskAmount * oddLine / 100 : pickRiskAmount / Math.abs(oddLine) * 100;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Lost':\n\t\t\t\t\tresultAmount -= pickRiskAmount;\n\t\t\t\t\treturn;\n\t\t\t\tcase 'Push':\n\t\t\t\tcase 'Cancelled':\n\t\t\t\tcase 'Postponed':\n\t\t\t\t\tresultAmount += 0;\n\t\t\t\t\t//\t\t\t\t\tif(action === 'actionReverse') break;\n\t\t\t\t\tif(action === 'winReverse') return;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tisClosed = true;\n\t\tif(resultAmount === 0) {\n\t\t\tstatus = 'Push';\n\t\t}\n\t\tif(resultAmount > 0) {\n\t\t\tstatus = 'Won';\n\t\t}\n\t\tif(resultAmount < 0) {\n\t\t\tstatus = 'Lost';\n\t\t}\n\t\tbreak;\n\n\t}\n\t\n\treturn { isClosed: isClosed, status: status, resultAmount: _.isNumber(resultAmount) ? Math.round(resultAmount) : null, note: note };\n};\n\nexport default reverse;"]}
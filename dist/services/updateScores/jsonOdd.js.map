{"version":3,"sources":["../../../src/services/updateScores/jsonOdd.js"],"names":["axiosJsonOdd","create","headers","jsonOddApiKey","jsonOdd","console","log","find","status","populate","path","match","isPicked","provider","matchTime","$lt","subtract","select","then","uniqBy","compact","picks","map","pick","Event","event","ID","pickJsonOddIDs","isEmpty","pickJsonOddID","get","res","data","length","title","content","latestJsonOddScore","FinalType","JSON","stringify","update","score","away","Number","AwayScore","home","HomeScore","isFinished","Final","updatedAt","findOneAndUpdate","$set","new","updatedEvent","_id"],"mappings":"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","file":"jsonOdd.js","sourcesContent":["import config from '../../config';\nimport Event from '../../models/Event';\nimport _ from 'lodash';\nimport axios from 'axios';\nimport moment from 'moment';\nimport Pick from '../../models/Pick';\nimport SystemLog from '../../models/SystemLog';\n\nconst axiosJsonOdd = axios.create({ headers: {'x-api-key': config.jsonOddApiKey}});\n\nconst jsonOdd = async () => {\n\t// eslint-disable-next-line\n\tconsole.log('update json odd score');\n\ttry {\n\t\tconst pickJsonOddIDs = await Pick.find({ status: 'Pending' }, 'Event')\n\t\t\t.populate({ path: 'Event', match: { isPicked: true, provider: 'jo', status: 'Pending', matchTime: { $lt: moment().subtract(10, 'm') } }, select: 'ID' }) \n\t\t\t.then(picks => _.uniqBy(_.compact(picks.map(pick => pick.Event )), 'ID')).map(event => event.ID);\n\t\tif(_.isEmpty(pickJsonOddIDs)) return;\n\t\tfor(let pickJsonOddID of pickJsonOddIDs){\n\t\t\tconst latestJsonOddScore = await axiosJsonOdd.get(`https://jsonodds.com/api/results/${pickJsonOddID}`).then(async res => {\n\t\t\t\tif(res.data.length === 1) return res.data[0];\n\t\t\t\tif(res.data.length > 1) {\n\t\t\t\t\tawait SystemLog.create({ title: 'json odd score result has 2 object', content: `https://jsonodds.com/api/results/${pickJsonOddID}`, status: 'warning'});\n\t\t\t\t\treturn {};\n\t\t\t\t}\n\t\t\t\tif(_.isEmpty(res.data)) {\n\t\t\t\t\tawait SystemLog.create({ title: 'json odd score result empty ', content: `https://jsonodds.com/api/results/${pickJsonOddID}`, status: 'warning'});\n\t\t\t\t\treturn {};\n\t\t\t\t}\n\t\t\t});\n\t\t\tif(_.isEmpty(latestJsonOddScore)) continue;\n\t\t\tlet status = '';\n\t\t\tswitch(latestJsonOddScore.FinalType){\n\t\t\tcase 'NotFinished':\n\t\t\t\tstatus = 'Pending';\n\t\t\t\tbreak;\n\t\t\tcase 'Finished':\n\t\t\t\tstatus = 'Finished';\n\t\t\t\tbreak;\n\t\t\tcase 'Postponed':\n\t\t\t\tstatus = 'Postponed';\n\t\t\t\tbreak;\n\t\t\tcase 'Abandoned':\n\t\t\tcase 'Canceled':\n\t\t\tcase 'Retired':\n\t\t\t\tstatus = 'Cancelled';\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tawait SystemLog.create({ title: 'update json odd score has Review', content: `${JSON.stringify(latestJsonOddScore)}`, status: 'warning'});\n\t\t\t\tstatus = 'Review';\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tconst update = {\n\t\t\t\tscore : {\n\t\t\t\t\taway: Number(latestJsonOddScore.AwayScore),\n\t\t\t\t\thome: Number(latestJsonOddScore.HomeScore)\n\t\t\t\t},\n\t\t\t\tisFinished: latestJsonOddScore.Final,\n\t\t\t\tstatus: status,\n\t\t\t\tupdatedAt: moment()\n\t\t\t};\n\t\t\tconst updatedEvent = await Event.findOneAndUpdate({ ID: pickJsonOddID, provider: 'jo', status: 'Pending' }, { $set: update }, { new: true });\n\n\t\t\tif(updatedEvent.status === 'Review'){\n\t\t\t\tawait SystemLog.create({ title: 'JsonOdd Event has Review', content: `${updatedEvent._id}`, status: 'danger'});\n\t\t\t}\n\n\t\t}\n\t} catch (e) {\n\t\tawait SystemLog.create({ title: 'update json odd score Failed', content: `${e}`, status: 'danger'});\n\t}\n};\n\nexport default jsonOdd;\n\n"]}